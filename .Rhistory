geom_text(TextDF, aes(x=x_coords, y=y, label=labels), show.legend = F, inherit.aes = F)
DF %>%
ggplot() +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
geom_text(data=TextDF, aes(x=x_coords, y=y, label=labels), show.legend = F, inherit.aes = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
pl
c(max(DF$fwd)*0.73, max(DF$fwd)*0.77)
rep(c(max(DF$fwd)*0.73, max(DF$fwd)*0.77), length(levels(DF$Chromosome))/2)
TextDF = data.frame(labels = levels(DF$Chromosome), x_coords = x_coords, y = rep(c(max(DF$fwd)*0.6, max(DF$fwd)*0.8), length(levels(DF$Chromosome))/2))
DF %>%
ggplot() +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
geom_text(data=TextDF, aes(x=x_coords, y=y, label=labels), show.legend = F, inherit.aes = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
pl
TextDF = data.frame(labels = levels(DF$Chromosome), x_coords = x_coords, y = rep(c(max(DF$fwd)*0.7, max(DF$fwd)*0.75), length(levels(DF$Chromosome))/2))
DF %>%
ggplot() +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
geom_text(data=TextDF, aes(x=x_coords, y=y, label=labels), show.legend = F, inherit.aes = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
pl
TextDF = data.frame(labels = levels(DF$Chromosome), x_coords = x_coords, y = rep(c(max(DF$fwd)*0.73, max(DF$fwd)*0.77), length(levels(DF$Chromosome))/2))
DF %>%
ggplot() +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
geom_text(data=TextDF, aes(x=x_coords, y=y, label=labels), show.legend = F, inherit.aes = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
pl
saveAs
TextDF = data.frame(labels = levels(DF$Chromosome), x_coords = x_coords, y = rep(c(max(DF$fwd)*0.73, max(DF$fwd)*0.77), length(levels(DF$Chromosome))/2))
DF %>%
ggplot() +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), show.legend = F, inherit.aes = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels)size = 1, show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels)size = 1, show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 1, show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 2, show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 2, label.padding = 0, show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 2, label.padding = 0.05, show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 2, padding = 0.05, show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 2, label.padding = unit(0.05, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.05, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
TextDF = data.frame(labels = levels(DF$Chromosome), x_coords = x_coords, y = jitter(max(DF$fwd)*0.75))
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
TextDF = data.frame(labels = levels(DF$Chromosome), x_coords = x_coords, y = jitter(max(DF$fwd)*0.75, factor = 0.1))
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
TextDF = data.frame(labels = levels(DF$Chromosome), x_coords = x_coords, y = jitter(max(DF$fwd)*0.75, factor = 1))
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
TextDF = data.frame(labels = levels(DF$Chromosome), x_coords = x_coords, y = jitter(max(DF$fwd)*0.75, factor = 1, amount = 1))
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
jitter(max(DF$fwd)*0.75, factor = 1, amount = 1)
jitter(rep(max(DF$fwd)*0.75, length(levels(DF$Chromosome))))
TextDF = data.frame(labels = levels(DF$Chromosome), x_coords = x_coords, y = jitter(rep(max(DF$fwd)*0.75, length(levels(DF$Chromosome)))))
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
TextDF = data.frame(labels = levels(DF$Chromosome),
x_coords = x_coords,
y = jitter(rep(max(DF$fwd)*0.75, length(levels(DF$Chromosome))), factor = 1, amount = 1))
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
TextDF = data.frame(labels = levels(DF$Chromosome),
x_coords = x_coords,
y = jitter(rep(max(DF$fwd)*0.75, length(levels(DF$Chromosome))), factor = 0.1))
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
TextDF = data.frame(labels = levels(DF$Chromosome),
x_coords = x_coords,
y = jitter(rep(max(DF$fwd)*0.75, length(levels(DF$Chromosome))), factor = 3))
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
TextDF = data.frame(labels = levels(DF$Chromosome),
x_coords = x_coords,
y = jitter(rep(max(DF$fwd)*0.75, length(levels(DF$Chromosome))), factor = 5))
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
levels(DF$Chromosome)
strsplit(levels(DF$Chromosome), "chr")
unlist(strsplit(levels(DF$Chromosome), "chr"))
gsub("chr", "", levels(DF$Chromosome))
TextDF = data.frame(labels = gsub("chr", "", levels(DF$Chromosome)),
x_coords = x_coords,
y = jitter(rep(max(DF$fwd)*0.75, length(levels(DF$Chromosome))), factor = 5))
DF %>%
ggplot() +
geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
# geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
geom_text(data=TextDF, aes(x=x_coords, y=10, label=labels), size = 3, show.legend = F, inherit.aes = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
# geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
geom_text(data=TextDF, aes(x=x_coords, y=-10, label=labels), size = 3, show.legend = F, inherit.aes = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
# geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
geom_text(data=TextDF, aes(x=x_coords, y=-100, label=labels), size = 3, show.legend = F, inherit.aes = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF %>%
ggplot() +
# geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
geom_text(data=TextDF, aes(x=x_coords, y=-0, label=labels), size = 3, show.legend = F, inherit.aes = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF
table(DF$Chromosome)
DF
DF %>%
dplyr::group_by(Chromosome) %>%
dplyr::summarise(max(fwd))
DF %>%
dplyr::group_by(Chromosome) %>%
dplyr::summarise(max(fwd)) %>%
dplyr::filter(`max(fwd)` > 0)
DF %>%
dplyr::group_by(Chromosome) %>%
dplyr::summarise(max(fwd)) %>%
dplyr::filter(`max(fwd)` > 0) -> CoveredChromosomes
TextDF
CoveredChromosomes
TextDF = data.frame(labels = gsub("chr", "", levels(DF$Chromosome)),
x_coords = x_coords,
y = jitter(rep(max(DF$fwd)*0.75, length(levels(DF$Chromosome))), factor = 5)) %>%
dplyr::filter(labels %in% gsub("chr", "", CoveredChromosomes$Chromosome))
TextDF
DF %>%
ggplot() +
# geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
geom_text(data=TextDF, aes(x=x_coords, y=-0, label=labels), size = 3, show.legend = F, inherit.aes = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
# Imports: QuasR, dplyr, ggplot2, parallel
SMFproj=QuasR::qAlign(sampleFile=sampleSheet, genome=deparse(substitute(genome)), paired="fr", bisulfite="undir")
SMFaln=SMFproj@alignments
SMFproj@aligner = "Rbowtie"
seq_length=seqlengths(genome)
if (TileWidth == "Chromosomes"){
tiles <- tileGenome(seq_length, tilewidth=max(seq_length),cut.last.tile.in.chrom=TRUE)
} else if (is.numeric(TileWidth)){
tiles = tileGenome(seq_length, tilewidth = TileWidth, cut.last.tile.in.chrom = T)
} else {
stop("TileWidth argument not valid: please pass an integer or leave the default 'Chromosomes'")
}
cl = makeCluster(4)
Counts=QuasR::qCount(SMFproj,tiles,clObj=cl)
TotVal = sum(Counts[,2])
TileIndexes = 1:nrow(Counts)
Counts %>%
dplyr::as_tibble() %>%
dplyr::mutate(TileIndex = TileIndexes,
Chromosome = factor(as.character(seqnames(tiles)), levels = levels(seqnames(tiles)))) -> DF
DF %>%
dplyr::group_by(Chromosome) %>%
dplyr::summarise(max(fwd)) %>%
dplyr::filter(`max(fwd)` > 0) -> CoveredChromosomes
# Make text DF
lapply(seq_along(unique(DF$Chromosome)), function(i){
ifelse(i==1, table(DF$Chromosome)[i]/2, table(DF$Chromosome)[i]/2 + sum(table(DF$Chromosome)[1:i-1]))
}) %>% unlist() -> x_coords
data.frame(labels = gsub("chr", "", levels(DF$Chromosome)),
x_coords = x_coords,
y = jitter(rep(max(DF$fwd)*0.75, length(levels(DF$Chromosome))), factor = 5)) %>%
dplyr::filter(labels %in% gsub("chr", "", CoveredChromosomes$Chromosome)) -> TextDF
DF %>%
ggplot() +
# geom_label(data=TextDF, aes(x=x_coords, y=y, label=labels), size = 3, label.padding = unit(0.1, "lines"), show.legend = F, inherit.aes = F) +
geom_point(aes(x=TileIndex, y=fwd, color = as.numeric(Chromosome) %% 2 == 0), show.legend = F) +
geom_text(data=TextDF, aes(x=x_coords, y=-0, label=labels), size = 3, show.legend = F, inherit.aes = F) +
scale_y_continuous(sec.axis = sec_axis(~(./TotVal)*100, name = "Percentages")) +
ylab("Count") +
ggtitle(paste0("Read counts over Tiles of width ", as.character(TileWidth))) +
theme_classic() -> pl
if (!is.null(saveAs)){
pl + ggsave(saveAs, width = 7, height = 5)
} else {
pl
}
DF
data.frame(labels = gsub("chr", "", levels(DF$Chromosome)), x_coords = x_coords)
# Make text DF
DF %>%
dplyr::group_by(Chromosome) %>%
dplyr::summarise(max(fwd)) %>%
dplyr::filter(`max(fwd)` > 0) -> CoveredChromosomes
# Make text DF
dplyr::group_by(DF, Chromosome) %>% dplyr::summarise(max(fwd)) %>% dplyr::filter(`max(fwd)` > 0) %>% ungroup() -> CoveredChromosomes
dplyr::group_by(DF, Chromosome) %>% dplyr::summarise(max(fwd))
# Make text DF
dplyr::group_by(DF, Chromosome) %>% dplyr::summarise(max(fwd)) %>% ungroup() %>% dplyr::filter(`max(fwd)` > 0) -> CoveredChromosomes
dplyr::group_by(DF, Chromosome) %>% dplyr::summarise(max(fwd)) %>% ungroup()
dplyr::group_by(DF, Chromosome) %>% dplyr::summarise(max(fwd)) %>% ungroup() %>% dplyr::filter(`max(fwd)` > 0)
dplyr::group_by(DF, Chromosome) %>% dplyr::summarise(max(fwd)) %>% ungroup() %>% dplyr::filter(`max(fwd)` > 0) -> CoveredChromosomes
DF
install.packages(c("devtools", "testthat"))
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("QuasR")
as.data.frame(installed.packages())
remove.packages("QuasR")
library(QuasR)
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
library(SingleMoleculeFootprinting)
rmarkdown::render("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes/SingleMoleculeFootprinting.Rmd", output_dir = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes", output_format = "html_document")
install.packages("rmarkdown")
rmarkdown::render("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes/SingleMoleculeFootprinting.Rmd", output_dir = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes", output_format = "html_document")
rmarkdown::render("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes/SingleMoleculeFootprinting.Rmd", output_dir = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes", output_format = "html_document")
rmarkdown::render("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes/SingleMoleculeFootprinting.Rmd", output_dir = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes", output_format = "html_document")
rmarkdown::render("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes/SingleMoleculeFootprinting.Rmd", output_dir = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes", output_format = "html_document")
rmarkdown::render("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes/SingleMoleculeFootprinting.Rmd", output_dir = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes", output_format = "html_document")
