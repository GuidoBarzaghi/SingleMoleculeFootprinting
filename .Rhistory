names(methAlnF)=names(methAln)
methAln=methAlnF
print(paste0(as.character((1-(length(unique(methAlnF[[1]]))/length(unique(methAln[[1]]))))*100), "% reads filtered"))
length(sortedReads[[1]][[1]])
source("../R/functions/single_molecule_manipulation_functions.r")
# Add names to TFBSs obj
sortedReads = SortSingleMolecules(regDF = regDF, sampleSheet = Qinput, target_range = TFBSs)
source("../R/functions/single_molecule_manipulation_functions.r")
# Add names to TFBSs obj
sortedReads = SortSingleMolecules(regDF = regDF, sampleSheet = Qinput, target_range = TFBSs)
length(sortedReads[[1]][[1]])
library(QuasR)
library("BSgenome.Mmusculus.UCSC.mm10")
#load path to the alignments
projAll <- qAlign(sampleSheet,"BSgenome.Mmusculus.UCSC.mm10",paired="fr",bisulfite="dir")
projAll@aligner = "Rbowtie"
proj <- projAll[alignments(projAll)$genome$SampleName==regDF[1,4]]
#define regions to extract methylation information
reg <- GRanges(seqnames = Rle(regDF[1,1]),ranges = IRanges(regDF[1,2], end = regDF[1,3]),seqlengths=seqlengths(Mmusculus))
regExp <- reg # expand the region at the end to catch all the pairs within the window
end(regExp) <- pmin(end(regExp)+2000,seqlengths(regExp)[as.character(seqnames(regExp))])
#call methylation vectors
methAln <- qMeth(proj,regExp,mode="allC",reportLevel="alignment")[[1]]
if(length(methAln[[1]])>0){ #control that at leas one read is found in the region
#filter PCR duplicates and low conversion reads
if(!is.na(conv.rate)| remove.duplicates ){
print(paste0("Filtering out reads with conversion rate > ", as.character(conv.rate)))
if (remove.duplicates){print("Removing duplicates")}
methAlnF = Filter_ConversionRate_and_Duplicates(methAln = methAln, reg = reg, conv.rate = conv.rate, remove.duplicates = remove.duplicates)
names(methAlnF)=names(methAln)
methAln=methAlnF
print(paste0(as.character((1-(length(unique(methAlnF[[1]]))/length(unique(methAln[[1]]))))*100), "% reads filtered"))
}
selCs = CollapseStrands_SelectCytosines(methAln = methAln, regDF = regDF) # in the belly checks for context
# Single TFs or clusters?
SortByCluster = tryCatch(length(target_range[[1]])>0, error = function(e){F})
}
SortByCluster
#subset the target_range for ranges within the collection bin
nb_ov = countOverlaps(unlist(target_range),GRanges(regDF),type='within')
fact=as.factor(string.split(names(unlist(target_range)),'_',3))
fact
names(unlist(target_range)
)
string.split(names(unlist(target_range)),'_',3)
target_range
names(unlist(target_range))
str_split(names(unlist(target_range)))
str_split(names(unlist(target_range)), "_")
lapply(str_split(names(unlist(target_range)), "_"), function(x){x[3]})
unlisot(lapply(str_split(names(unlist(target_range)), "_"), function(x){x[3]}))
unlist(lapply(str_split(names(unlist(target_range)), "_"), function(x){x[3]}))
as.factor(unlist(lapply(str_split(names(unlist(target_range)), "_"), function(x){x[3]})))
fact = as.factor(unlist(lapply(str_split(names(unlist(target_range)), "_"), function(x){x[3]})))
# fact=as.factor(string.split(names(unlist(target_range)),'_',3))
cluster.i=tapply(nb_ov,fact,sum)
cluster.i
names(which(cluster.i>0))
string.split(names(which(cluster.i>0)),'\\.',1)
as.factor(unlist(lapply(str_split(names(which(cluster.i>0)), "//."), function(x){x[1]})))
paste('TFBS_cluster_',string.split(names(which(cluster.i>0)),'\\.',1),sep='')
ids = paste0('TFBS_cluster_', unlist(lapply(str_split(names(which(cluster.i>0)), "\\."), function(x){x[1]})))
ids
paste('TFBS_cluster_',string.split(names(which(cluster.i>0)),'\\.',1),sep='')
# library(SingleMoleculeFootprinting)
source("../R/functions/context_methylation_functions.r")
source("../R/functions/single_molecule_manipulation_functions.r")
library(BSgenome.Mmusculus.UCSC.mm10)
library(QuasR)
Qinput='/g/krebs/barzaghi/Rscripts/R_package/QuasR_input.txt' #QuasR alignement file containing a sample
out_path=paste("../../")
cO=19 #minimal coverage
Qinput = "/g/krebs/barzaghi/Rscripts/R_package/QuasR_input_pairs.txt"
out_path=paste("../../")
cO=19 #minimal coverage
SMFproj=qAlign(sampleFile=Qinput,
genome="BSgenome.Mmusculus.UCSC.mm10",
projectName = "NRF1_pair_amplicon",
paired="fr",
bisulfite="undir")
SMFaln=as.data.frame(alignments(SMFproj)[[1]])
SMFproj@aligner = "Rbowtie"
TFBSs = readRDS("../inst/extdata/example_amplicon_TFBSs_pairs.rds")
Region_of_interest = GRanges(seqnames = "chr6", ranges = IRanges(start = 88106000, end = 88106500), strand = "+")
regDF = cbind(as.data.frame(Region_of_interest)[,1:3], sample = SMFaln$SampleName)
sampleSheet = Qinput
target_range = TFBSs
inMs=c(NA,NA)
upMs=c(NA,NA)
doMs=c(NA,NA)
conv.rate=0
remove.duplicates=F
library(QuasR)
library("BSgenome.Mmusculus.UCSC.mm10")
#load path to the alignments
projAll <- qAlign(sampleSheet,"BSgenome.Mmusculus.UCSC.mm10",paired="fr",bisulfite="dir")
projAll@aligner = "Rbowtie"
proj <- projAll[alignments(projAll)$genome$SampleName==regDF[1,4]]
#define regions to extract methylation information
reg <- GRanges(seqnames = Rle(regDF[1,1]),ranges = IRanges(regDF[1,2], end = regDF[1,3]),seqlengths=seqlengths(Mmusculus))
regExp <- reg # expand the region at the end to catch all the pairs within the window
end(regExp) <- pmin(end(regExp)+2000,seqlengths(regExp)[as.character(seqnames(regExp))])
#call methylation vectors
methAln <- qMeth(proj,regExp,mode="allC",reportLevel="alignment")[[1]]
if(!is.na(conv.rate)| remove.duplicates ){
print(paste0("Filtering out reads with conversion rate > ", as.character(conv.rate)))
if (remove.duplicates){print("Removing duplicates")}
methAlnF = Filter_ConversionRate_and_Duplicates(methAln = methAln, reg = reg, conv.rate = conv.rate, remove.duplicates = remove.duplicates)
names(methAlnF)=names(methAln)
methAln=methAlnF
print(paste0(as.character((1-(length(unique(methAlnF[[1]]))/length(unique(methAln[[1]]))))*100), "% reads filtered"))
}
selCs = CollapseStrands_SelectCytosines(methAln = methAln, regDF = regDF) # in the belly checks for context
# Single TFs or clusters?
SortByCluster = tryCatch(length(target_range[[1]])>0, error = function(e){F})
SortByCluster
#subset the target_range for ranges within the collection bin
nb_ov = countOverlaps(unlist(target_range),GRanges(regDF),type='within')
fact = as.factor(unlist(lapply(str_split(names(unlist(target_range)), "_"), function(x){x[3]})))
cluster.i=tapply(nb_ov,fact,sum)
ids = paste0('TFBS_cluster_', unlist(lapply(str_split(names(which(cluster.i>0)), "\\."), function(x){x[1]})))
TFs=target_range[ids]
if (any(is.na(c(inMs,upMs,doMs)))){
print("Bins coordinates not passed, using default values for clusters: [-35,-25];[-7,7];[25,35]")
inMs=c(-7,7)
upMs=c(-35,-25)
doMs=c(25,35)
}
st=TFs
Crange=IRanges(methAln[[2]][selCs],methAln[[2]][selCs])
methAln
Crange=IRanges(methAln[[2]][selCs],methAln[[2]][selCs])
Crange
st
resize(unlist(st),1,fix='start')
#create collecting intervals
#get center of each TF binding site
TFcenter=resize(unlist(st),1,fix='start')
TFcenter
inMP=GRanges(seqnames(TFcenter),IRanges(start(TFcenter)+inMs[1],start(TFcenter)+inMs[2]))
inMP
names(inMP)=string.split(names(TFcenter),'\\.',2)
inMP
inMPs=split(inMP,string.split(names(TFcenter),'\\.',1))
inMPs
TFcenter
names(TFcenter)
string.split(names(TFcenter),'\\.',1)
inMP
split(inMP,string.split(names(TFcenter),'\\.',1))
st
inMPs
st
resize(x, 1, fix='start')
st
resize(st[[1]])
st[[1]]
resize(st[[1]], 1, fix="start")
inMPs
#create collecting intervals
#get center of each TF binding site
lapply(st, function(x){
gr = resize(x, 1, fix='start')
GRanges(seqnames(gr), IRanges(start = start(gr)+inMs[1], end = start(gr)+inMs[2]))
})
#create collecting intervals
#get center of each TF binding site
lapply(st, function(x){
gr = resize(x, 1, fix='start')
GRanges(seqnames(gr), IRanges(start = start(gr)+inMs[1], end = start(gr)+inMs[2]))
}) %>% GRangesList()
inMPs
gr
#create collecting intervals
#get center of each TF binding site
lapply(st, function(x){
print(names(x))
gr = resize(x, 1, fix='start')
GRanges(seqnames(gr), IRanges(start = start(gr)+inMs[1], end = start(gr)+inMs[2]))
}) %>% GRangesList()
gr_resized
#create collecting intervals
#get center of each TF binding site
lapply(st, function(x){
gr = resize(x, 1, fix='start')
gr_resized = GRanges(seqnames(gr), IRanges(start = start(gr)+inMs[1], end = start(gr)+inMs[2]))
names(gr_resized) = print(names(x))
gr_resized
}) %>% GRangesList()
#create collecting intervals
#get center of each TF binding site
lapply(st, function(x){
gr = resize(x, 1, fix='start')
gr_resized = GRanges(seqnames(gr), IRanges(start = start(gr)+inMs[1], end = start(gr)+inMs[2]))
names(gr_resized) = print(names(x))
gr_resized
}) %>% GRangesList()
#create collecting intervals
#get center of each TF binding site
lapply(st, function(x){
gr = resize(x, 1, fix='start')
gr_resized = GRanges(seqnames(gr), IRanges(start = start(gr)+inMs[1], end = start(gr)+inMs[2]))
names(gr_resized) = names(x)
gr_resized
}) %>% GRangesList()
inMPs
#create collecting intervals
#get center of each TF binding site
lapply(st, function(x){
gr = resize(x, 1, fix='start')
gr_resized = GRanges(seqnames(gr), IRanges(start = start(gr)+inMs[1], end = start(gr)+inMs[2]))
names(gr_resized) = names(x)
gr_resized
}) %>% GRangesList() -> asd
asd == inMPs
all(asd == inMPs)
unlist(GRangesList(lapply(seq_along(st),function(i){
#calculate borders
TFcluster=st[[i]]
minV=order(start(TFcluster),decreasing=F)[1]
upMP=GRanges(seqnames(TFcluster[minV]),IRanges(start(TFcluster[minV])+upMs[1],start(TFcluster[minV])+upMs[2]))
upMP
})))
asd
st
seq_along(st)
i=1
remove(asd)
#calculate borders
TFcluster=st[[i]]
minV=order(start(TFcluster),decreasing=F)[1]
upMP=GRanges(seqnames(TFcluster[minV]),IRanges(start(TFcluster[minV])+upMs[1],start(TFcluster[minV])+upMs[2]))
upMP
minV
start(TFcluster)
order(start(TFcluster),decreasing=F)
order(start(TFcluster),decreasing=F)[1]
minV
GRanges(seqnames(TFcluster[minV]),IRanges(start(TFcluster[minV])+upMs[1],start(TFcluster[minV])+upMs[2]))
upMPs=unlist(GRangesList(lapply(seq_along(st),function(i){
#calculate borders
TFcluster=st[[i]]
minV=order(start(TFcluster),decreasing=F)[1]
upMP=GRanges(seqnames(TFcluster[minV]),IRanges(start(TFcluster[minV])+upMs[1],start(TFcluster[minV])+upMs[2]))
upMP
})))
names(upMPs)=names(st)
upMPs
doMPs=unlist(GRangesList(lapply(seq_along(st),function(i){
#calculate borders
TFcluster=st[[i]]
maxV=order(start(TFcluster),decreasing=T)[1]
doMP=GRanges(seqnames(TFcluster[maxV]),IRanges(start(TFcluster[maxV])+doMs[1],start(TFcluster[maxV])+doMs[2]))
doMP
})))
names(doMPs)=names(st)
doMPs
#generate dynamic bins depending on the conposition of the TF cluster
nb_TF=lengths(st)
TFBS_single = readRDS("../inst/extdata/example_amplicon_TFBSs.rds")
TFBS_pairs = readRDS("../inst/extdata/example_amplicon_TFBSs_pairs.rds")
getwd()
TFBS_single = readRDS("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/inst/extdata/example_amplicon_TFBSs.rds")
TFBS_pairs = readRDS("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/inst/extdata/example_amplicon_TFBSs_pairs.rds")
TFBS_single
TFBS_pairs
inMs
inMs[2]-inMs[1]
lapply(st, function(x){
gr = resize(x, 1, fix='center')
gr_resized = GRanges(seqnames(gr), IRanges(start = start(gr)+inMs[1], end = start(gr)+inMs[2]))
names(gr_resized) = names(x)
gr_resized
}) %>% GRangesList() -> inMPs
# up
upMPs=unlist(GRangesList(lapply(seq_along(st),function(i){
TFcluster=st[[i]]
minV=order(start(TFcluster),decreasing=F)[1]
upMP=GRanges(seqnames(TFcluster[minV]),IRanges(start(TFcluster[minV])+upMs[1],start(TFcluster[minV])+upMs[2]))
upMP
})))
names(upMPs)=names(st)
# down
doMPs=unlist(GRangesList(lapply(seq_along(st),function(i){
TFcluster=st[[i]]
maxV=order(start(TFcluster),decreasing=T)[1]
doMP=GRanges(seqnames(TFcluster[maxV]),IRanges(start(TFcluster[maxV])+doMs[1],start(TFcluster[maxV])+doMs[2]))
doMP
})))
names(doMPs)=names(st)
nb_TF=lengths(st)
nb_TF
unique(nb_TF)
seq_along(sort(unique(nb_TF)))
#group clusters by number of TFs
#create dynamic bins
#d_bins are grouped by binning type (number of TFs in the cluster)
ClusterSizes = sort(unique(nb_TF))
paste('clusterOf_',ClusterSizes,'_TF',sep='')
i
#i=2
nbTF=ClusterSizes[i]
nbTF
inMPs
nbTF
inMPs
lengths(inMPs
)
inMPs[lengths(inMPs)==nbTF]
lengths(inMPs)
TFrange
TFrange = inMPs[lengths(inMPs) == nbTF]
TFrange
seq_along(TFrange)
TFrange
seq_along(TFrange)
cl=1
seq(nbTF)
TFrange[[cl]]
se = lapply(seq_along(TFrange), function(cl){
lapply(seq(nbTF), function(pos){TFrange[[cl]][pos]})
})
se
inMPsd=lapply(seq(nbTF),function(pos){
do.call(c,lapply(se, `[[`, pos))
})
inMPsd
cluster_id=names(st)[i]
bins=GRangesList(c(list(upMPs[names(TFrange)]),inMPsd,list(doMPs[names(TFrange)])	))
bins
d_bins = lapply(seq_along(ClusterSizes),function(i){
nbTF = ClusterSizes[i]
TFrange = inMPs[lengths(inMPs) == nbTF]
se = lapply(seq_along(TFrange), function(cl){
lapply(seq(nbTF), function(pos){TFrange[[cl]][pos]})
})
inMPsd=lapply(seq(nbTF),function(pos){
do.call(c,lapply(se, `[[`, pos))
})
cluster_id=names(st)[i]
bins=GRangesList(c(list(upMPs[names(TFrange)]),inMPsd,list(doMPs[names(TFrange)])	))
bins
})
names(d_bins) = paste0('clusterOf_', ClusterSizes, '_TF')
d_bins
ClusterSizes
d_bins
seq_along(d_bins)
bin_t=1
#print(bin_t)
bins=d_bins[[bin_t]]
bins
#find overlaping Cs
ovs=lapply(seq_along(bins),function(i){
as.matrix(findOverlaps(ranges(bins[[i]]),Crange)  )
})
#compute the methylation vectors
Mvs=lapply(seq_along(bins),function(i){
methAln[[4]][selCs][ovs[[i]][,2]]
})
#compute the readIDs
IDvs=lapply(seq_along(bins),function(i){
paste(names(bins[[1]])[ovs[[i]][,1]],methAln[[1]][selCs][ovs[[i]][,2]],sep='_')
})
#group Cs per region/per_read
g.Ms=lapply(seq_along(bins),function(i){
round(tapply(  Mvs[[i]],IDvs[[i]],mean))
})
#find unique IDs
u.IDs=lapply(seq_along(bins),function(i){
sort(unique(IDvs[[i]]))
})
ovs
Mvs
IDvs
g.Ms
u.IDs
intMat=do.call(cbind,lapply(seq_along(bins),function(i){
u.IDs[[1]]%in% u.IDs[[i]]
}))
intMat
library(QuasR)
library("BSgenome.Mmusculus.UCSC.mm10")
library(QuasR)
library(RColorBrewer)
library(rtracklayer)
library(caTools)
library(gplots)
library(data.table)
source('/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/R/functions/single_molecule_manipulation_functions.r') #load the ranges
source('/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/R/functions/single_molecule_TF_call/functions/context_methylation_functions.r')
#use a set of reference genomic regions (i.e TF binding motifs mapped on the genome)
TFBS_single = readRDS("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/inst/extdata/example_amplicon_TFBSs.rds")
TFBS_pairs = readRDS("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/inst/extdata/example_amplicon_TFBSs_pairs.rds")
## load the clusters
## These are targeted by the second part of the analysis
TF_cluster=readRDS('./single_molecule_TF_call/example_sets/MotDB_clusters.rds')[[1]]
#load amplicon definition
ampliconfile <- read.table("./single_molecule_TF_call/example_sets/amplicon_coordinates.txt", header = T)
sampleSheet_sinlge = '/g/krebs/barzaghi/Rscripts/R_package/QuasR_input.txt'
sampleSheet_pairs= '/g/krebs/barzaghi/Rscripts/R_package/QuasR_input_pairs.txt'
NOMEproj=qAlign(sampleFile=sampleSheet_sinlge,
genome="BSgenome.Mmusculus.UCSC.mm10",
paired="fr",
bisulfite="undir")
NOMEaln=as.data.frame(alignments(NOMEproj)[[1]])
sampleNames
NOMEaln
sp.sbs=seq_along(NOMEaln$SampleName)
sp.sbs
#definition of the states
allPos=expand.grid(c(0,1),c(0,1),c(0,1))
patternStrings=names(table(apply(allPos,1,function(x){(paste(as.character((x)),collapse=''))})))
states=list(
unassigned=patternStrings[!sl(patternStrings)%in%c(1,2,5,6,8)],
nucleososme=patternStrings[c(1,2,5)],
unbound=patternStrings[8],
bound=patternStrings[6]
)
allPos=expand.grid(c(0,1),c(0,1),c(0,1))
patternStrings=names(table(apply(allPos,1,function(x){(paste(as.character((x)),collapse=''))})))
states=list(
unassigned=patternStrings[!seq_along(patternStrings)%in%c(1,2,5,6,8)],
nucleososme=patternStrings[c(1,2,5)],
unbound=patternStrings[8],
bound=patternStrings[6]
)
states
statesF=as.factor(unlist(lapply(sl(states),function(i){rep(names(states[i]),length(states[[i]]))}))[order(unlist(states))])
statesF=factor(statesF,levels=names(states))
statesF=as.factor(unlist(lapply(seq_along(states),function(i){rep(names(states[i]),length(states[[i]]))}))[order(unlist(states))])
statesF=factor(statesF,levels=names(states))
statesF
allPos=expand.grid(c(0,1),c(0,1),c(0,1))
patternStrings=names(table(apply(allPos,1,function(x){(paste(as.character((x)),collapse=''))})))
#using only 'pure' states
states=list(
closed=patternStrings[1],
accessible=patternStrings[8],
bound=patternStrings[6],
unassigned=patternStrings[!seq_along(patternStrings)%in%c(1,6,8)]
)
patternStrings
!seq_along(patternStrings)%in%c(1,6,8)
seq_along(patternStrings)
allPos=expand.grid(c(0,1),c(0,1),c(0,1))
patternStrings=names(table(apply(allPos,1,function(x){(paste(as.character((x)),collapse=''))})))
#using only 'pure' states
states=list(
closed=patternStrings[1],
accessible=patternStrings[8],
bound=patternStrings[6],
unassigned=patternStrings[!seq_along(patternStrings)%in%c(1,6,8)]
)
statesF=as.factor(unlist(lapply(seq_along(states),function(i){rep(names(states[i]),length(states[[i]]))}))[order(unlist(states))])
statesF=factor(statesF,levels=names(states))
sp.sbs
sampleNames[sp.sbs][sp]
sampleNames = NOMEaln$SampleName
sp.sbs=seq_along(sampleNames)
sampleNames
sampleNames[sp.sbs]
sampleNames[sp.sbs][1]
# library(SingleMoleculeFootprinting)
# source("../R/functions/context_methylation_functions.r")
# source("../R/functions/single_molecule_manipulation_functions.r")
devtools::load_all()
# library(SingleMoleculeFootprinting)
# source("../R/functions/context_methylation_functions.r")
# source("../R/functions/single_molecule_manipulation_functions.r")
devtools::load_all()
# library(SingleMoleculeFootprinting)
# source("../R/functions/context_methylation_functions.r")
# source("../R/functions/single_molecule_manipulation_functions.r")
devtools::load_all()
Qinput='/g/krebs/barzaghi/Rscripts/R_package/QuasR_input.txt' #QuasR alignement file containing a sample
out_path=paste("../../")
cO=19 #minimal coverage
SMFproj=qAlign(sampleFile=Qinput,
genome="BSgenome.Mmusculus.UCSC.mm10",
projectName = "CTCF_amplicon",
paired="fr",
bisulfite="undir")
SMFaln=as.data.frame(alignments(SMFproj)[[1]])
SMFproj@aligner = "Rbowtie"
Region_of_interest = GRanges(seqnames = "chr1", ranges = IRanges(start = 31210117, end = 31210616), strand = "+")
# Quantify methylation in region of interest
meth_gr <- qMeth(SMFproj, mode="allC", Region_of_interest)
# Estract methylation info from contexts of interest only, the function also collapses strands and filters for coverage
contextMet=CallContextMethylation(meth_gr, cO, Mmusculus)
devtools::check()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
PATH
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "testthat"))
install.packages(c("devtools", "testthat"))
install.packages("gert")
remotes::install_github("r-lib/gert")
.libPaths()
remotes::install_github("r-lib/gert")
install.packages("gert")
install.packages("gert")
install.packages("SingleMoleculeFootprinting")
install.packages("SingleMoleculeFootprinting", repos = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
install.packages("SingleMoleculeFootprinting", repos = "/g/krebs/barzaghi/Rscripts/R_package/")
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
library(SingleMoleculeFootprinting)
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
library(SingleMoleculeFootprinting)
devtools::document("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
library(SingleMoleculeFootprinting)
