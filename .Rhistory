genome = BSgenome.Mmusculus.UCSC.mm10,
range = Region_of_interest,
coverage = 20,
ConvRate.thr = 0.2)
Methylation[[1]]
Methylation[[2]][1:10, 1:10]
TFBSs = GenomicRanges::GRanges("chr6", IRanges(c(88106216, 88106253), c(88106226, 88106263)), strand = "-")
elementMetadata(TFBSs)$name = c("NRF1", "NRF1")
names(TFBSs) = c(paste0("TFBS_", c(4305215, 4305216)))
PlotAvgSMF(MethGR = Methylation[[1]], range = Region_of_interest, TFBSs = TFBSs)
PlotSM(MethSM = Methylation[[2]], range = Region_of_interest)
PlotSM(MethSM = Methylation[[2]], range = Region_of_interest, SortedReads = "HC")
SortedReads_TFCluster = SortReadsByTFCluster(MethSM = Methylation[[2]], TFBSs = TFBSs)
print(paste0("Number of retrieved states: ", as.character(length(SortedReads_TFCluster))))
print("States population:")
unlist(lapply(SortedReads_TFCluster, length))
PlotSM(MethSM = Methylation[[2]], range = Region_of_interest, SortedReads = SortedReads_TFCluster)
StateQuantificationPlot(SortedReads = SortedReads_TFCluster)
PlotSingleSiteSMF(ContextMethylation = Methylation,
sample = MySample,
range = Region_of_interest,
SortedReads = SortedReads_TFCluster,
TFBSs = TFBSs,
saveAs = "FullPath.pdf")
Region_of_interest
88106500 - 88106000
Qinput = system.file("extdata", "QuasR_input_GW.txt", package = "SingleMoleculeFootprinting", mustWork = T)
Qinput
Qinput = system.file("extdata", "QuasR_input_GW.txt", package = "SingleMoleculeFootprinting", mustWork = T)
MySample = suppressMessages(read_tsv(Qinput)[[2]])
Region_of_interest = GRanges(seqnames = "chr6", ranges = IRanges(start = 88106000, end = 88106500), strand = "*")
Methylation = CallContextMethylation(sampleSheet = Qinput,
sample = MySample,
genome = BSgenome.Mmusculus.UCSC.mm10,
range = Region_of_interest,
coverage = 20,
ConvRate.thr = 0.2)
Qinput = system.file("extdata", "QuasR_input_GW.txt", package = "SingleMoleculeFootprinting", mustWork = T)
MySample = suppressMessages(read_tsv(Qinput)[[2]])
Region_of_interest = GRanges(seqnames = "chr6", ranges = IRanges(start = 88106000, end = 88106500), strand = "*")
Methylation = CallContextMethylation(sampleSheet = Qinput,
sample = MySample,
genome = BSgenome.Mmusculus.UCSC.mm10,
range = Region_of_interest,
coverage = 20,
ConvRate.thr = 0.2)
sampleSheet = Qinput
sample = MySample
genome = BSgenome.Mmusculus.UCSC.mm10
range = Region_of_interest
coverage = 20
ConvRate.thr = 0.2
message("Setting QuasR project")
QuasRprj = GetQuasRprj(sampleSheet, genome)
Samples = QuasR::alignments(QuasRprj)[[1]]$SampleName
message("Calling methylation at all Cytosines")
MethGR = QuasR::qMeth(QuasRprj[grep(sample, Samples)], mode="allC", range, collapseBySample = T, keepZero = T)
MethSM = GetSingleMolMethMat(QuasRprj, range, sample) # this selects the sample internally ---> TO FIX
MethSM = FilterByConversionRate(MethSM, chr = seqnames(range), genome = genome, thr = ConvRate.thr)
message("Subsetting Cytosines by permissive genomic context (NGCNN, NNCGN)") # Here we use a permissive context: needed for the strand collapsing
ContextFilteredMethGR = list(GC = FilterContextCytosines(MethGR, genome, "NGCNN"),
CG = FilterContextCytosines(MethGR, genome, "NNCGN"))
ContextFilteredMethSM = lapply(seq_along(ContextFilteredMethGR), function(i){MethSM[,colnames(MethSM) %in% as.character(start(ContextFilteredMethGR[[i]]))]})
message("Collapsing strands")
StrandCollapsedMethGR = list(GC = CollapseStrands(ContextFilteredMethGR[[1]], context = "GC"),
CG = CollapseStrands(ContextFilteredMethGR[[2]], context = "CG"))
StrandCollapsedMethSM = list(GC = CollapseStrandsSM(ContextFilteredMethSM[[1]], context = "GC", genome = genome, chr = as.character(seqnames(range))),
CG = CollapseStrandsSM(ContextFilteredMethSM[[2]], context = "CG", genome = genome, chr = as.character(seqnames(range))))
message("Filtering Cs for coverage")
CoverageFilteredMethGR = list(GC = CoverageFilter(StrandCollapsedMethGR[[1]], thr = coverage),
CG = CoverageFilter(StrandCollapsedMethGR[[2]], thr = coverage))
CoverageFilteredMethSM = lapply(seq_along(CoverageFilteredMethGR), function(i){StrandCollapsedMethSM[[i]][,colnames(StrandCollapsedMethSM[[i]]) %in% as.character(start(CoverageFilteredMethGR[[i]]))]})
# Determining stric context based on ExpType
ExpType = DetectExperimentType(Samples)
if (ExpType == "NO"){
ExpType_contexts = c("DGCHN", "NWCGW")
} else if (ExpType == "SS"){
ExpType_contexts = c("", "CG")
} else if (ExpType == "DE"){
ExpType_contexts = c("GCH", "HCG")
}
message(paste0("Subsetting Cytosines by strict genomic context (", ExpType_contexts[1], ", ", ExpType_contexts[2],") based on the detected experiment type: ", ExpType))
ContextFilteredMethGR_strict = list(FilterContextCytosines(CoverageFilteredMethGR[[1]], genome, ExpType_contexts[1]),
FilterContextCytosines(CoverageFilteredMethGR[[2]], genome, ExpType_contexts[2]))
names(ContextFilteredMethGR_strict) = ExpType_contexts
ContextFilteredMethSM_strict = lapply(seq_along(ContextFilteredMethGR_strict), function(i){CoverageFilteredMethSM[[i]][,colnames(CoverageFilteredMethSM[[i]]) %in% as.character(start(ContextFilteredMethGR_strict[[i]]))]})
MergedGR = sort(append(ContextFilteredMethGR_strict[[1]], ContextFilteredMethGR_strict[[2]]))
MergedSM = BiocGenerics::cbind(ContextFilteredMethSM_strict[[1]], ContextFilteredMethSM_strict[[2]])
ContextFilteredMethSM_strict
ContextFilteredMethSM_strict[[1]]
lapply(ContextFilteredMethSM_strict, dim)
merge(ContextFilteredMethSM_strict[[1]], ContextFilteredMethSM_strict[[2]])
merge(ContextFilteredMethSM_strict[[1]], ContextFilteredMethSM_strict[[2]], .keep_all = T)
ContextFilteredMethSM_strict[[1]][rownames(ContextFilteredMethSM_strict[[2]]),]
ContextFilteredMethSM_strict[[1]][!(rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]])),]
intersect(lapply(ContextFilteredMethSM_strict, rownames))
intersect(rownames(ContextFilteredMethSM_strict[[1]]), rownames(ContextFilteredMethSM_strict[[2]]))
intersect(rownames(ContextFilteredMethSM_strict[[1]]), rownames(ContextFilteredMethSM_strict[[2]])) %>% length()
ReadsFullyCovered = intersect(rownames(ContextFilteredMethSM_strict[[1]]), rownames(ContextFilteredMethSM_strict[[2]]))
ReadsFullyCovered
DGCHNonly_matrix = ContextFilteredMethSM_strict[[1]][!(rownames(ContextFilteredMethSM_strict[[1]]) %in% ReadsFullyCovered),]
DGCHNonly_matrix
NWCGWonly_matrix = ContextFilteredMethSM_strict[[2]][!(rownames(ContextFilteredMethSM_strict[[2]]) %in% ReadsFullyCovered),]
NWCGWonly_matrix
dim(DGCHNonly_matrix)
matrix(data = NA, nrow = nrow(DGCHNonly_matrix), ncol = ncol(ContextFilteredMethSM_strict[[2]]), dimnames = list(rownames(DGCHNonly_matrix), colnames(ContextFilteredMethSM_strict[[2]])))
matrix(data = NA, nrow = nrow(DGCHNonly_matrix), ncol = ncol(ContextFilteredMethSM_strict[[2]]), dimnames = list(rownames(DGCHNonly_matrix), colnames(ContextFilteredMethSM_strict[[2]]))) %>% dim()
dim(DGCHNonly_matrix)
ncol(NWCGWonly_matrix)
colnames(NWCGWonly_matrix)
FillingFor_DGCHNonly_matrix = matrix(data = NA, nrow = nrow(DGCHNonly_matrix), ncol = ncol(NWCGWonly_matrix), dimnames = list(rownames(DGCHNonly_matrix), colnames(NWCGWonly_matrix)))
FillingFor_DGCHNonly_matrix
FillingFor_NWCGWonly_matrix = matrix(data = NA, nrow = nrow(NWCGWonly_matrix), ncol = ncol(DGCHNonly_matrix), dimnames = list(rownames(NWCGWonly_matrix), colnames(DGCHNonly_matrix)))
FillingFor_NWCGWonly_matrix
dim(ContextFilteredMethSM_strict[[1]]) == dim(ContextFilteredMethSM_strict[[2]])
all(dim(ContextFilteredMethSM_strict[[1]]) == dim(ContextFilteredMethSM_strict[[2]]))
BiocGenerics::cbind(NWCGWonly_matrix, FillingFor_NWCGWonly_matrix)
# cbind matrixes with respective fillings
BiocGenerics::cbind(DGCHNonly_matrix, FillingFor_DGCHNonly_matrix)
FilledDGCHN = BiocGenerics::cbind(DGCHNonly_matrix, FillingFor_DGCHNonly_matrix)
FilledNWCGW = BiocGenerics::cbind(NWCGWonly_matrix, FillingFor_NWCGWonly_matrix)
all(rownames(ContextFilteredMethSM_strict[[1]]) == rownames(ContextFilteredMethSM_strict[[2]]))
nrow(ContextFilteredMethSM_strict[[1]]) != nrow(ContextFilteredMethSM_strict[[2]])
DGCHNonly_reads = !(rownames((ContextFilteredMethSM_strict[[1]])) %in% rownames((ContextFilteredMethSM_strict[[2]])))
DGCHNonly_reads
DGCHNonly_reads = rownames((ContextFilteredMethSM_strict[[1]]))[!(rownames((ContextFilteredMethSM_strict[[1]])) %in% rownames((ContextFilteredMethSM_strict[[2]])))]
DGCHNonly_reads
DGCHNonly_reads = rownames((ContextFilteredMethSM_strict[[1]]))[!(rownames((ContextFilteredMethSM_strict[[1]])) %in% rownames((ContextFilteredMethSM_strict[[2]])))]
NWCGWonly_reads = rownames((ContextFilteredMethSM_strict[[2]]))[!(rownames((ContextFilteredMethSM_strict[[2]])) %in% rownames((ContextFilteredMethSM_strict[[1]])))]
NWCGWonly_reads
DGCHNonly_mat = matrix(data = NA, nrow = length(DGCHNonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[2]]), dimnames = list(DGCHNonly_reads, colnames(ContextFilteredMethSM_strict[[2]])))
DGCHNonly_mat
NWCGWonly_mat = matrix(data = NA, nrow = length(NWCGWonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[1]]), dimnames = list(NWCGWonly_reads, colnames(ContextFilteredMethSM_strict[[1]])))
DGCHNonly_reads = rownames((ContextFilteredMethSM_strict[[1]]))[!(rownames((ContextFilteredMethSM_strict[[1]])) %in% rownames((ContextFilteredMethSM_strict[[2]])))]
NWCGWonly_reads = rownames((ContextFilteredMethSM_strict[[2]]))[!(rownames((ContextFilteredMethSM_strict[[2]])) %in% rownames((ContextFilteredMethSM_strict[[1]])))]
# Fill two dummy matrices to make the reads equal in the ContextFilteredMethSM_strict matrices
DGCHNonly_mat = matrix(data = NA, nrow = length(DGCHNonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[2]]), dimnames = list(DGCHNonly_reads, colnames(ContextFilteredMethSM_strict[[2]])))
NWCGWonly_mat = matrix(data = NA, nrow = length(NWCGWonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[1]]), dimnames = list(NWCGWonly_reads, colnames(ContextFilteredMethSM_strict[[1]])))
# When some reads only cover either DGCHN or NWCGW positions cbind complains
if(nrow(ContextFilteredMethSM_strict[[1]]) != nrow(ContextFilteredMethSM_strict[[2]])){
# Which reads cover only one context?
DGCHNonly_reads = rownames((ContextFilteredMethSM_strict[[1]]))[!(rownames((ContextFilteredMethSM_strict[[1]])) %in% rownames((ContextFilteredMethSM_strict[[2]])))]
NWCGWonly_reads = rownames((ContextFilteredMethSM_strict[[2]]))[!(rownames((ContextFilteredMethSM_strict[[2]])) %in% rownames((ContextFilteredMethSM_strict[[1]])))]
# Fill two dummy matrices to make the reads equal in the ContextFilteredMethSM_strict matrices
DGCHNonly_mat = matrix(data = NA, nrow = length(DGCHNonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[2]]), dimnames = list(DGCHNonly_reads, colnames(ContextFilteredMethSM_strict[[2]])))
NWCGWonly_mat = matrix(data = NA, nrow = length(NWCGWonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[1]]), dimnames = list(NWCGWonly_reads, colnames(ContextFilteredMethSM_strict[[1]])))
# merge the ContextFilteredMethSM_strict matrices to the respective dummy
ContextFilteredMethSM_strict[[1]] = BiocGenerics::rbind(ContextFilteredMethSM_strict[[1]], NWCGWonly_mat)
ContextFilteredMethSM_strict[[2]] = BiocGenerics::rbind(ContextFilteredMethSM_strict[[2]], DGCHNonly_mat)
}
MergedSM = BiocGenerics::cbind(ContextFilteredMethSM_strict[[1]], ContextFilteredMethSM_strict[[2]])
MergedSM = MergedSM[,as.character(sort(as.numeric(colnames(MergedSM))))]
dim(MergedSM)
lapply(ContextFilteredMethSM_strict, dim)
all(rownames(ContextFilteredMethSM_strict[[1]]) == rownames(ContextFilteredMethSM_strict[[2]]))
1(all(rownames(ContextFilteredMethSM_strict[[1]]) == rownames(ContextFilteredMethSM_strict[[2]])))
!(all(rownames(ContextFilteredMethSM_strict[[1]]) == rownames(ContextFilteredMethSM_strict[[2]])))
ReadsFullyCovered
MergedSM[!(rownames(MergedSM) %in% ReadsFullyCovered)]
MergedSM[!(rownames(MergedSM) %in% ReadsFullyCovered),]
!(all(sort(rownames(ContextFilteredMethSM_strict[[1]])) == sort(rownames(ContextFilteredMethSM_strict[[2]]))))
ContextFilteredMethSM_strict = lapply(seq_along(ContextFilteredMethGR_strict), function(i){CoverageFilteredMethSM[[i]][,colnames(CoverageFilteredMethSM[[i]]) %in% as.character(start(ContextFilteredMethGR_strict[[i]]))]})
MergedGR = sort(append(ContextFilteredMethGR_strict[[1]], ContextFilteredMethGR_strict[[2]]))
!(all(sort(rownames(ContextFilteredMethSM_strict[[1]])) == sort(rownames(ContextFilteredMethSM_strict[[2]]))))
nrow(ContextFilteredMethSM_strict[[1]]) != nrow(ContextFilteredMethSM_strict[[2]])
# Which reads cover only one context?
DGCHNonly_reads = rownames((ContextFilteredMethSM_strict[[1]]))[!(rownames((ContextFilteredMethSM_strict[[1]])) %in% rownames((ContextFilteredMethSM_strict[[2]])))]
NWCGWonly_reads = rownames((ContextFilteredMethSM_strict[[2]]))[!(rownames((ContextFilteredMethSM_strict[[2]])) %in% rownames((ContextFilteredMethSM_strict[[1]])))]
# Fill two dummy matrices to make the reads equal in the ContextFilteredMethSM_strict matrices
DGCHNonly_mat = matrix(data = NA, nrow = length(DGCHNonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[2]]), dimnames = list(DGCHNonly_reads, colnames(ContextFilteredMethSM_strict[[2]])))
NWCGWonly_mat = matrix(data = NA, nrow = length(NWCGWonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[1]]), dimnames = list(NWCGWonly_reads, colnames(ContextFilteredMethSM_strict[[1]])))
# merge the ContextFilteredMethSM_strict matrices to the respective dummy
ContextFilteredMethSM_strict[[1]] = BiocGenerics::rbind(ContextFilteredMethSM_strict[[1]], NWCGWonly_mat)
ContextFilteredMethSM_strict[[2]] = BiocGenerics::rbind(ContextFilteredMethSM_strict[[2]], DGCHNonly_mat)
!(all(sort(rownames(ContextFilteredMethSM_strict[[1]])) == sort(rownames(ContextFilteredMethSM_strict[[2]]))))
rownames(ContextFilteredMethSM_strict[[1]])
rownames(ContextFilteredMethSM_strict[[2]])
rownames(ContextFilteredMethSM_strict[[2]]) == rownames(ContextFilteredMethSM_strict[[2]])
all(rownames(ContextFilteredMethSM_strict[[2]]) == rownames(ContextFilteredMethSM_strict[[2]]))
all(rownames(ContextFilteredMethSM_strict[[2]]) == rownames(ContextFilteredMethSM_strict[[1]]))
rownames(ContextFilteredMethSM_strict[[2]])
sort
(rownames(ContextFilteredMethSM_strict[[2]]))
all(order(rownames(ContextFilteredMethSM_strict[[2]])) == order(rownames(ContextFilteredMethSM_strict[[1]])))
ContextFilteredMethSM_strict = lapply(seq_along(ContextFilteredMethGR_strict), function(i){CoverageFilteredMethSM[[i]][,colnames(CoverageFilteredMethSM[[i]]) %in% as.character(start(ContextFilteredMethGR_strict[[i]]))]})
NWCGWonly_reads = rownames((ContextFilteredMethSM_strict[[2]]))[!(rownames((ContextFilteredMethSM_strict[[2]])) %in% rownames((ContextFilteredMethSM_strict[[1]])))]
NWCGWonly_reads
DGCHNonly_reads
C
# Which reads cover only one context?
DGCHNonly_reads = rownames((ContextFilteredMethSM_strict[[1]]))[!(rownames((ContextFilteredMethSM_strict[[1]])) %in% rownames((ContextFilteredMethSM_strict[[2]])))]
DGCHNonly_reads
# Fill two dummy matrices to make the reads equal in the ContextFilteredMethSM_strict matrices
DGCHNonly_mat = matrix(data = NA, nrow = length(DGCHNonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[2]]), dimnames = list(DGCHNonly_reads, colnames(ContextFilteredMethSM_strict[[2]])))
NWCGWonly_mat = matrix(data = NA, nrow = length(NWCGWonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[1]]), dimnames = list(NWCGWonly_reads, colnames(ContextFilteredMethSM_strict[[1]])))
DGCHNonly_mat
NWCGWonly_mat
rownames(ContextFilteredMethSM_strict[[1]]) == rownames(NWCGWonly_mat)
rownames(NWCGWonly_mat)
all(rownames(ContextFilteredMethSM_strict[[2]]), rownames(DGCHNonly_mat))
all(rownames(ContextFilteredMethSM_strict[[2]]) == rownames(DGCHNonly_mat))
DGCHNonly_mat
!(rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]]))
rownames(ContextFilteredMethSM_strict[[1]])[!(rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]]))] == rownames(NWCGWonly_mat)
rownames(ContextFilteredMethSM_strict[[1]])[!(rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]]))] == rownames(DGCHNonly_mat)
ContextFilteredMethSM_strict = lapply(seq_along(ContextFilteredMethGR_strict), function(i){CoverageFilteredMethSM[[i]][,colnames(CoverageFilteredMethSM[[i]]) %in% as.character(start(ContextFilteredMethGR_strict[[i]]))]})
DGCHNonly_reads = rownames((ContextFilteredMethSM_strict[[1]]))[!(rownames((ContextFilteredMethSM_strict[[1]])) %in% rownames((ContextFilteredMethSM_strict[[2]])))]
NWCGWonly_reads = rownames((ContextFilteredMethSM_strict[[2]]))[!(rownames((ContextFilteredMethSM_strict[[2]])) %in% rownames((ContextFilteredMethSM_strict[[1]])))]
# Fill two dummy matrices to make the reads equal in the ContextFilteredMethSM_strict matrices
DGCHNonly_mat = matrix(data = NA, nrow = length(DGCHNonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[2]]), dimnames = list(DGCHNonly_reads, colnames(ContextFilteredMethSM_strict[[2]])))
NWCGWonly_mat = matrix(data = NA, nrow = length(NWCGWonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[1]]), dimnames = list(NWCGWonly_reads, colnames(ContextFilteredMethSM_strict[[1]])))
# merge the ContextFilteredMethSM_strict matrices to the respective dummy
ContextFilteredMethSM_strict[[1]] = BiocGenerics::rbind(ContextFilteredMethSM_strict[[1]], NWCGWonly_mat)
ContextFilteredMethSM_strict[[2]] = BiocGenerics::rbind(ContextFilteredMethSM_strict[[2]], DGCHNonly_mat)
rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]])
all(rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]]))
all(rownames(ContextFilteredMethSM_strict[[1]]) == rownames(ContextFilteredMethSM_strict[[2]]))
all(rownames(ContextFilteredMethSM_strict[[2]]) %in% rownames(ContextFilteredMethSM_strict[[1]]))
sort(c("c", "a", "a2"))
all(sort(rownames(ContextFilteredMethSM_strict[[1]])) %in% sort(rownames(ContextFilteredMethSM_strict[[2]])))
nrow(ContextFilteredMethSM_strict[[1]]) != nrow(ContextFilteredMethSM_strict[[2]]) | !(all(sort(rownames(ContextFilteredMethSM_strict[[1]])) %in% sort(rownames(ContextFilteredMethSM_strict[[2]]))))
nrow(ContextFilteredMethSM_strict[[1]]) != nrow(ContextFilteredMethSM_strict[[2]]) || !(all(sort(rownames(ContextFilteredMethSM_strict[[1]])) %in% sort(rownames(ContextFilteredMethSM_strict[[2]]))))
#BiocGenerics::cbind()
A = matrix(data = c(0,1,0,1))
A
A = matrix(data = c(0,1,0,1), ncol = 2, dimnames = list(c("a","b"), c("c", "d")))
A
B = matrix(data = c(2,3,2,3), ncol = 2, dimnames = list(c("b","a"), c("f", "g")))
B
BiocGenerics::cbind(A,B)
# Sort reads alphanumerically before binding, because cbind doesn't join (I've tested) matrices by rownames
ContextFilteredMethSM_strict[[1]] = ContextFilteredMethSM_strict[[1]][sort(rownames(ContextFilteredMethSM_strict[[1]])),]
ContextFilteredMethSM_strict[[2]] = ContextFilteredMethSM_strict[[2]][sort(rownames(ContextFilteredMethSM_strict[[2]])),]
ContextFilteredMethSM_strict = lapply(seq_along(ContextFilteredMethGR_strict), function(i){CoverageFilteredMethSM[[i]][,colnames(CoverageFilteredMethSM[[i]]) %in% as.character(start(ContextFilteredMethGR_strict[[i]]))]})
ContextFilteredMethSM_strict = lapply(seq_along(ContextFilteredMethGR_strict), function(i){CoverageFilteredMethSM[[i]][,colnames(CoverageFilteredMethSM[[i]]) %in% as.character(start(ContextFilteredMethGR_strict[[i]]))]})
DGCHNonly_reads = rownames((ContextFilteredMethSM_strict[[1]]))[!(rownames((ContextFilteredMethSM_strict[[1]])) %in% rownames((ContextFilteredMethSM_strict[[2]])))]
NWCGWonly_reads = rownames((ContextFilteredMethSM_strict[[2]]))[!(rownames((ContextFilteredMethSM_strict[[2]])) %in% rownames((ContextFilteredMethSM_strict[[1]])))]
# Fill two dummy matrices to make the reads equal in the ContextFilteredMethSM_strict matrices
DGCHNonly_mat = matrix(data = NA, nrow = length(DGCHNonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[2]]), dimnames = list(DGCHNonly_reads, colnames(ContextFilteredMethSM_strict[[2]])))
NWCGWonly_mat = matrix(data = NA, nrow = length(NWCGWonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[1]]), dimnames = list(NWCGWonly_reads, colnames(ContextFilteredMethSM_strict[[1]])))
# merge the ContextFilteredMethSM_strict matrices to the respective dummy
ContextFilteredMethSM_strict[[1]] = BiocGenerics::rbind(ContextFilteredMethSM_strict[[1]], NWCGWonly_mat)
ContextFilteredMethSM_strict[[2]] = BiocGenerics::rbind(ContextFilteredMethSM_strict[[2]], DGCHNonly_mat)
# Sort reads alphanumerically before binding, because cbind doesn't join (I've tested) matrices by rownames
ContextFilteredMethSM_strict[[1]] = ContextFilteredMethSM_strict[[1]][sort(rownames(ContextFilteredMethSM_strict[[1]])),]
ContextFilteredMethSM_strict[[2]] = ContextFilteredMethSM_strict[[2]][sort(rownames(ContextFilteredMethSM_strict[[2]])),]
all(rownames(ContextFilteredMethSM_strict[[1]]) == rownames(ContextFilteredMethSM_strict[[2]]))
ContextFilteredMethSM_strict = lapply(seq_along(ContextFilteredMethGR_strict), function(i){CoverageFilteredMethSM[[i]][,colnames(CoverageFilteredMethSM[[i]]) %in% as.character(start(ContextFilteredMethGR_strict[[i]]))]})
DGCHNonly_reads = rownames((ContextFilteredMethSM_strict[[1]]))[!(rownames((ContextFilteredMethSM_strict[[1]])) %in% rownames((ContextFilteredMethSM_strict[[2]])))]
NWCGWonly_reads = rownames((ContextFilteredMethSM_strict[[2]]))[!(rownames((ContextFilteredMethSM_strict[[2]])) %in% rownames((ContextFilteredMethSM_strict[[1]])))]
# Fill two dummy matrices to make the reads equal in the ContextFilteredMethSM_strict matrices
DGCHNonly_mat = matrix(data = NA, nrow = length(DGCHNonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[2]]), dimnames = list(DGCHNonly_reads, colnames(ContextFilteredMethSM_strict[[2]])))
NWCGWonly_mat = matrix(data = NA, nrow = length(NWCGWonly_reads), ncol = ncol(ContextFilteredMethSM_strict[[1]]), dimnames = list(NWCGWonly_reads, colnames(ContextFilteredMethSM_strict[[1]])))
# merge the ContextFilteredMethSM_strict matrices to the respective dummy
ContextFilteredMethSM_strict[[1]] = BiocGenerics::rbind(ContextFilteredMethSM_strict[[1]], NWCGWonly_mat)
ContextFilteredMethSM_strict[[2]] = BiocGenerics::rbind(ContextFilteredMethSM_strict[[2]], DGCHNonly_mat)
all(rownames(ContextFilteredMethSM_strict[[1]]) == rownames(ContextFilteredMethSM_strict[[2]]))
# Sort reads alphanumerically before binding, because cbind doesn't join (I've tested) matrices by rownames
ContextFilteredMethSM_strict[[1]] = ContextFilteredMethSM_strict[[1]][sort(rownames(ContextFilteredMethSM_strict[[1]])),]
ContextFilteredMethSM_strict[[2]] = ContextFilteredMethSM_strict[[2]][sort(rownames(ContextFilteredMethSM_strict[[2]])),]
all(rownames(ContextFilteredMethSM_strict[[1]]) == rownames(ContextFilteredMethSM_strict[[2]]))
MergedSM = BiocGenerics::cbind(ContextFilteredMethSM_strict[[1]], ContextFilteredMethSM_strict[[2]])
ContextFilteredMethSM_strict = lapply(seq_along(ContextFilteredMethGR_strict), function(i){CoverageFilteredMethSM[[i]][,colnames(CoverageFilteredMethSM[[i]]) %in% as.character(start(ContextFilteredMethGR_strict[[i]]))]})
MergedSM[rownames(ContextFilteredMethSM_strict[[1]][!(rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]])]),]
MergedSM[rownames(ContextFilteredMethSM_strict[[1]][!(rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]]),]
rownames(ContextFilteredMethSM_strict[[1]][!(rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]])
]
rownames(ContextFilteredMethSM_strict[[1]][!(rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]])]
MergedSM[rownames(ContextFilteredMethSM_strict[[1]])[!(rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]]))],]
MergedSM = MergedSM[,as.character(sort(as.numeric(colnames(MergedSM))))]
MergedSM[rownames(ContextFilteredMethSM_strict[[1]])[!(rownames(ContextFilteredMethSM_strict[[1]]) %in% rownames(ContextFilteredMethSM_strict[[2]]))],]
devtools::load_all()
setwd("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
devtools::load_all()
rm(list = c("coverage", "genome"))
devtools::load_all()
Qinput = system.file("extdata", "QuasR_input_GW.txt", package = "SingleMoleculeFootprinting", mustWork = T)
MySample = suppressMessages(read_tsv(Qinput)[[2]])
Region_of_interest = GRanges(seqnames = "chr6", ranges = IRanges(start = 88106000, end = 88106500), strand = "*")
Methylation = CallContextMethylation(sampleSheet = Qinput,
sample = MySample,
genome = BSgenome.Mmusculus.UCSC.mm10,
range = Region_of_interest,
coverage = 20,
ConvRate.thr = 0.2)
Methylation
Qinput = system.file("extdata", "QuasR_input_GW.txt", package = "SingleMoleculeFootprinting", mustWork = T)
MySample = suppressMessages(read_tsv(Qinput)[[2]])
Region_of_interest = GRanges(seqnames = "chr6", ranges = IRanges(start = 88106000, end = 88106500), strand = "*")
TFBSs = GenomicRanges::GRanges("chr6", IRanges(c(88106216, 88106253), c(88106226, 88106263)), strand = "-")
elementMetadata(TFBSs)$name = c("NRF1", "NRF1")
names(TFBSs) = c(paste0("TFBS_", c(4305215, 4305216)))
Methylation = CallContextMethylation(sampleSheet = Qinput,
sample = MySample,
genome = BSgenome.Mmusculus.UCSC.mm10,
range = Region_of_interest,
coverage = 20,
ConvRate.thr = 0.2)
SortedReads_TFCluster = SortReadsByTFCluster(MethSM = Methylation[[2]], TFBSs = TFBSs)
PlotSingleSiteSMF(ContextMethylation = Methylation,
sample = MySample,
range = Region_of_interest,
SortedReads = SortedReads_TFCluster,
TFBSs = TFBSs,
saveAs = NULL)
Qinput = system.file("extdata", "QuasR_input_GW.txt", package = "SingleMoleculeFootprinting", mustWork = T)
MySample = suppressMessages(read_tsv(Qinput)[[2]])
Region_of_interest = GRanges(seqnames = "chr6", ranges = IRanges(start = 88106000, end = 88106500), strand = "*")
TFBSs = GenomicRanges::GRanges("chr6", IRanges(c(88106216, 88106253), c(88106226, 88106263)), strand = "-")
elementMetadata(TFBSs)$name = c("NRF1", "NRF1")
names(TFBSs) = c(paste0("TFBS_", c(4305215, 4305216)))
Methylation = CallContextMethylation(sampleSheet = Qinput,
sample = MySample,
genome = BSgenome.Mmusculus.UCSC.mm10,
range = Region_of_interest,
coverage = 20,
ConvRate.thr = 0.2)
SortedReads_TFCluster = SortReadsByTFCluster(MethSM = Methylation[[2]], TFBSs = TFBSs)
PlotSingleSiteSMF(ContextMethylation = Methylation,
sample = MySample,
range = Region_of_interest,
SortedReads = SortedReads_TFCluster,
TFBSs = TFBSs,
saveAs = NULL)
PlotSingleSiteSMF(ContextMethylation = Methylation,
sample = MySample,
range = Region_of_interest,
SortedReads = SortedReads_TFCluster,
TFBSs = TFBSs,
saveAs = "../../VignetteOutDir/NRF1pair_singleSite_latest_GW.pdf")
Qinput = system.file("extdata", "QuasR_input_pairs.txt", package = "SingleMoleculeFootprinting", mustWork = T)
sampleSheet = Qinput
genome = BSgenome.Mmusculus.UCSC.mm10
QuasRprj <- QuasR::qAlign(sampleFile=sampleSheet,
genome=genome@pkgname,
aligner = "Rbowtie",
paired="fr",
bisulfite="undir",
projectName="prj",
checkOnly=F)
QuasRprj =SingleMoleculeFootprinting::GetQuasRprj(sampleSheet, genome)
GetQuasRprj
QuasRprj@alignments$SampleName
nr.cores = length(unique(QuasRprj@alignments$SampleName))
nr.cores
cores=8
QuasRprj = GetQuasRprj(sampleSheet, genome)
if (length(grep("chr", seqlevels(BaitRegions))) == 0){
seqlevels(BaitRegions) = paste0("chr", seqlevels(BaitRegions))
}
cl = makeCluster(cores)
InBaits=QuasR::qCount(QuasRprj, BaitRegions, clObj = cl)
seq_length = seqlengths(genome)
tiles = tileGenome(seq_length, tilewidth = max(seq_length), cut.last.tile.in.chrom=TRUE)
cl = makeCluster(cores)
GW = QuasR::qCount(QuasRprj, tiles, clObj=cl)
BaitRegions = import("/g/krebs/barzaghi/DB/misc/mm10_baits.bed.gz", format="bed")
baits = BaitRegions
QuasRprj = GetQuasRprj(sampleSheet, genome)
if (length(grep("chr", seqlevels(BaitRegions))) == 0){
seqlevels(BaitRegions) = paste0("chr", seqlevels(BaitRegions))
}
cl = makeCluster(cores)
InBaits=QuasR::qCount(QuasRprj, BaitRegions, clObj = cl)
seq_length = seqlengths(genome)
tiles = tileGenome(seq_length, tilewidth = max(seq_length), cut.last.tile.in.chrom=TRUE)
cl = makeCluster(cores)
GW = QuasR::qCount(QuasRprj, tiles, clObj=cl)
prj@alignments$SampleName
length(QuasRprj@alignments$SampleName)
InBaits
head(InBaits)
InBaits[,1+1]
capture_efficiency = c()
for(n in 1:length(unique(QuasRprj@alignments$SampleName))){
capture_efficiency = c(capture_efficiency, sum(InBaits[,n+1]) / sum(GW[,n+1]))
# capture_efficiency = c(capture_efficiency, sum(dplyr::select(dplyr::as_tibble(InBaits), -width)[,c(n)]) / sum(dplyr::select(dplyr::as_tibble(GW), -width)[,c(n)]))
}
capture_efficiency
devtools::load_all()
rm(list = c("genome"))
BaitCaptureEfficiency = BaitCapture(sampleSheet = Qinput, genome = BSgenome.Mmusculus.UCSC.mm10, baits = BaitRegions)
BaitCaptureEfficiency
sampleSheet
genome
genome =BSgenome.Mmusculus.UCSC.mm10
chr=19
cores=1
QuasRprj = GetQuasRprj(sampleSheet, genome)
seq_length = seqlengths(genome)
chr = tileGenome(seq_length[chr], tilewidth=max(seq_length[chr]), cut.last.tile.in.chrom=TRUE)
cl = makeCluster(cores)
methylation_calls_C = qMeth(prj, query = chr, mode="allC", reportLevel="C", keepZero = T, clObj = cl, asGRanges = T, collapseBySample = F)
methylation_calls_C = qMeth(QuasRprj, query = chr, mode="allC", reportLevel="C", keepZero = T, clObj = cl, asGRanges = T, collapseBySample = F)
stopCluster(cl)
seqContext = getSeq(genome, resize(methylation_calls_C, 3, fix='center'))
GCc = vcountPattern(DNAString("GCN"), seqContext, fixed=F) # take all context for exclusion
CGc = vcountPattern(DNAString("NCG"), seqContext, fixed=F) # only valid for calling conversion rates
#SMF
#non CG non GC
out_c_met = methylation_calls_C[GCc==0 & CGc==0,]
tot.col = grep('R\\d_T',colnames(values(out_c_met)))
tot.col = grep('_T$',colnames(values(out_c_met)))
met.col = grep('_M$',colnames(values(out_c_met)))
tot.c = as.matrix(values(out_c_met)[,tot.col])
met.c = as.matrix(values(out_c_met)[,met.col])
conv_rate = round((1-(colSums(met.c)/colSums(tot.c)))*100,1)
conv_rate
out_c_met
grep()
tot.col
chr=6
QuasRprj = GetQuasRprj(sampleSheet, genome)
# check convertion rate:
# how many of the non CG/GC cytosines are methylated?
seq_length = seqlengths(genome)
chr = tileGenome(seq_length[chr], tilewidth=max(seq_length[chr]), cut.last.tile.in.chrom=TRUE)
cl = makeCluster(cores)
methylation_calls_C = qMeth(QuasRprj, query = chr, mode="allC", reportLevel="C", keepZero = T, clObj = cl, asGRanges = T, collapseBySample = F)
stopCluster(cl)
seqContext = getSeq(genome, resize(methylation_calls_C, 3, fix='center'))
GCc = vcountPattern(DNAString("GCN"), seqContext, fixed=F) # take all context for exclusion
CGc = vcountPattern(DNAString("NCG"), seqContext, fixed=F) # only valid for calling conversion rates
#SMF
#non CG non GC
out_c_met = methylation_calls_C[GCc==0 & CGc==0,]
# CG_met = methylation_calls_C[!CGc==0,]
# GC_met = methylation_calls_C[!GCc==0,]
#non GC context
# tot.col = grep('R\\d_T',colnames(values(out_c_met)))
tot.col = grep('_T$',colnames(values(out_c_met)))
met.col = grep('_M$',colnames(values(out_c_met)))
tot.c = as.matrix(values(out_c_met)[,tot.col])
met.c = as.matrix(values(out_c_met)[,met.col])
conv_rate = round((1-(colSums(met.c)/colSums(tot.c)))*100,1)
conv_rate
devtools::load_all()
remove(genome)
devtools::load_all()
ConversionRateEstimate = ConversionRate(sampleSheet = Qinput, genome = BSgenome.Mmusculus.UCSC.mm10, chr = 6)
# Get methylation data from previous SMF experiments
contextmethylation <- readRDS("/g/krebs/krebs/analysis/SMF/MM/methCall/Context_methylation_call_20_all_samples.txt.rds")
# Get methylation data from previous SMF experiments
contextmethylation <- readRDS("/g/krebs/krebs/analysis/SMF/MM/methCall/Context_methylation_call_20_all_samples.txt.rds")
AllC=contextmethylation[[1]] # GRanges with all methylation sites
metMat_ref=contextmethylation[[2]] # all methylation data
head(metMat_ref)
subset_metmat = metMat_ref[,c(1:6,9:12)]
remove(contextmethylation)
subset_metmat = metMat_ref[,c(1:6,9:12)]
#subset_metmat = metMat_ref[,c(1:6,9:12)]
!(1:ncol(metMat_ref) %in% c(1:6,9:12))
1:ncol(metMat_ref)!(1:ncol(metMat_ref) %in% c(1:6,9:12))
1:ncol(metMat_ref)[!(1:ncol(metMat_ref) %in% c(1:6,9:12))\
1:ncol(metMat_ref)[!(1:ncol(metMat_ref) %in% c(1:6,9:12))]
metMat_ref[,]
1:ncol(metMat_ref)[!(1:ncol(metMat_ref) %in% c(1:6,9:12))]
metMat_ref[1:6,c(7:8, 12:ncol(metMat_ref))]
metMat_ref[1:6,c(7:8, 12:ncol(metMat_ref))] = NULL
metMat_ref[1:6,c(7:8, 12:ncol(metMat_ref))] = NULL
metMat_ref[1:6,]
remove(metMat_ref[1:6,c(7:8, 12:ncol(metMat_ref))])
metMat_ref = metMat_ref[,c(1:6,9:12)]
library(QuasR)
library(BSgenome.Mmusculus.UCSC.mm10)
library(GenomicRanges)
library(tidyverse)
library(ggplot2)
INPUT_FILE_NAME="/g/krebs/barzaghi/analyses/misc/HiC_SMF/full_bowtie1/QuasR_input_file.txt" #argm[1]
prj <- qAlign(sampleFile=INPUT_FILE_NAME,
genome="BSgenome.Mmusculus.UCSC.mm10",
aligner = "Rbowtie",
paired="fr",
bisulfite="undir",
projectName="prj",
checkOnly=F)
prj@aligner = "Rbowtie"
nr.cores = length(unique(prj@alignments$SampleName))
nr.cores
# check convertion rate:
# how many of the non CG/GC cytosines are methylated?
AllC = readRDS(paste0("/g/krebs/barzaghi/DB/misc/AllC.rds"))
musmus_length=seqlengths(Mmusculus)
chr19 = tileGenome(musmus_length[19], tilewidth=max(musmus_length[19]), cut.last.tile.in.chrom=TRUE)
cl = makeCluster(nr.cores)
methylation_calls_C = qMeth(prj, query = chr19, mode="allC", reportLevel="C", keepZero = T, clObj = cl, asGRanges = T, collapseBySample = F)
dim(methylation_calls_C)
seqContext=getSeq(Mmusculus,resize(methylation_calls_C,3, fix='center'))
GCc=vcountPattern(DNAString("GCN"),seqContext,fixed=F) # take all context for exclusion
CGc=vcountPattern(DNAString("NCG"),seqContext,fixed=F) #only valid for calling conversion rates
#SMF
#non CG non GC
out_c_met=methylation_calls_C[GCc==0 & CGc==0,]
CG_met=methylation_calls_C[!CGc==0,]
GC_met=methylation_calls_C[!GCc==0,]
#non GC context
tot.col=grep('R\\d_T',colnames(values(out_c_met)))
tot.col=grep('_T$',colnames(values(out_c_met)))
met.col=grep('_M$',colnames(values(out_c_met)))
tot.c=as.matrix(values(out_c_met)[,tot.col])
met.c=as.matrix(values(out_c_met)[,met.col])
conv_rate=round((1-(colSums(met.c)/colSums(tot.c)))*100,1)
conv_rate
sessionInfo()
BiocManager::install("QuasR")
BiocManager::install("QuasR", version = "1.30.0")
BiocManager::install("QuasR", version = 1.30.0)
BiocManager::install("QuasR", update = T)
sessionInfo()
BiocManager::version()
#BiocManager::install(pkgs = "QuasR", )
BiocManager::repositories()
